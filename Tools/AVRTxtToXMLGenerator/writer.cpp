/******************************************************************************\

	AVR registers TXT file to XML generator
	Copyright (C) 2007 Mikk Leini, TTÜ Robotiklubi
	2007-03-04
	
	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
\******************************************************************************/

#include <string>
#include <iostream>
#include <sstream>
#include <fstream>
#include <vector>

using namespace std;

#include "types.h"
#include "functions.h"


/**
*	Save AVR CPP lib header file
*
*	@param string sDestFileName - Destination file name
*	@param string sTargetName - Target name
*	@param string sShortName - Target short name
*	@param TRegisterList &aRegisterList - Registers list
*	@param TCombinedRegisterList &aCombinedRegisterList - Combined registers list
*	@return boolean - Success indicator
*/
bool saveCPPLibHeaderFile(string sDestFileName, string sTargetName, string sShortName, TRegisterList &aRegisterList, TCombinedRegisterList &aCombinedRegisterList) {
	fstream fDestStream;

	// Header file opening
	fDestStream.open(sDestFileName.c_str(), fstream::out | fstream::trunc);
	if (!fDestStream) {
		cerr << "Error creating destination file!" << endl;
		return false;
	}
	
	fDestStream << "/* This file is generated by AVRCppLibHGen. Do not modify manually. */" << endl;
	fDestStream << endl;
	fDestStream << "#ifndef __AVR_CPP_IO_" << sTargetName << "_H__" << endl;
	fDestStream << "#define __AVR_CPP_IO_" << sTargetName << "_H__" << endl;
	fDestStream << endl;
	fDestStream << "#ifndef __AVR_CPP_IO_H__" << endl;
	fDestStream << "#error \"Include <avr/cpp/IO.h> instead of <avr/cpp/" << sDestFileName << ">.\"" << endl;
	fDestStream << "#endif" << endl;
	fDestStream << endl;

	// Write register declarations
	fDestStream << "// Registers" << endl;

	for (TRegisterList::iterator oRegister = aRegisterList.begin();	oRegister < aRegisterList.end(); oRegister++) {

		fDestStream << "__DECLARE_" << oRegister->iBitWidth << "BIT_REGISTER__(" << oRegister->sName << ");" << endl;
	}

	fDestStream << endl;

	// Write combined registers
	fDestStream << "// Combined registers" << endl;

	for (TCombinedRegisterList::iterator oCombinedRegister = aCombinedRegisterList.begin(); oCombinedRegister < aCombinedRegisterList.end(); oCombinedRegister++) {

		fDestStream << "__DECLARE_" << oCombinedRegister->iBitWidth << "BIT_REGISTER__(" << oCombinedRegister->sName << ");" << endl;
	}

	fDestStream << endl;

	// Write register bits
	for (TRegisterList::iterator oRegister = aRegisterList.begin(); oRegister < aRegisterList.end(); oRegister++) {

		if (oRegister->aBits.size() == 0) continue;
		fDestStream << "// " << oRegister->sName << endl;

		for (TRegisterBitList::iterator oBit = oRegister->aBits.begin(); oBit < oRegister->aBits.end(); oBit++) {
	
			fDestStream << "#define _";
			// If register bit name is one char sized then add register name in front of it
			if (oBit->sName.length() == 1) {
				fDestStream << oRegister->sName << "_";
			}

			fDestStream << oBit->sName << "\t";
			fDestStream.flags(ios::hex);
			fDestStream << "0x" << (1 << oBit->iIndex) << endl;
		}

		fDestStream << endl;
	}

	// Write general ports
	fDestStream << "// General ports" << endl;

	for (TRegisterList::iterator oRegister = aRegisterList.begin();	oRegister < aRegisterList.end(); oRegister++) {

		if ((oRegister->sName.substr(0, 4) == "PORT") && (oRegister->sName.length() == 5)) {
			char cPortChar = oRegister->sName.at(4);
			fDestStream << "__DECLARE_PORT__(" << cPortChar << ");" << endl;
		}
	}

	fDestStream << endl;
	fDestStream << "#endif // ifndef __AVR_CPP_IO_" << sTargetName << "_H__" << endl;
	fDestStream << endl;

	// Close file
	fDestStream.close();

	return true;
}


/**
*	Save registers XML file
*
*	@param string sDestFileName - Destination file name
*	@param string sTargetName - Target name
*	@param string sShortName - Target short name
*	@param TRegisterList &aRegisterList - Registers list
*	@param TCombinedRegisterList &aCombinedRegisterList - Combined registers list
*	@return boolean - Success indicator
*/
bool saveXMLFile(string sDestFileName, string sTargetName, string sShortName, TRegisterList &aRegisterList, TCombinedRegisterList &aCombinedRegisterList) {
	fstream fDestStream;

	// Header file opening
	fDestStream.open(sDestFileName.c_str(), fstream::out | fstream::trunc);
	if (!fDestStream) {
		cerr << "Error creating destination file!" << endl;
		return false;
	}

	fDestStream << "<?xml version=\"1.0\"?>" << endl;
	fDestStream << "<controller name=\"" << sTargetName << "\" id=\"" << sShortName << "\">" << endl;
	fDestStream << "\t<registers>" << endl;

	// Write normal registers
	for (TRegisterList::iterator oRegister = aRegisterList.begin();	oRegister < aRegisterList.end(); oRegister++) {

		fDestStream << "\t\t<register name=\"" << oRegister->sName << "\" bits=\"" << oRegister->iBitWidth << "\">" << endl;

		if (oRegister->aBits.size() > 0) {
			fDestStream << "\t\t\t<bits>" << endl;
	
			for (TRegisterBitList::iterator oBit = oRegister->aBits.begin(); oBit < oRegister->aBits.end(); oBit++) {
		
				fDestStream << "\t\t\t\t<bit name=\"";
				// If register bit name is one char sized then add register name in front of it
				if (oBit->sName.length() == 1) {
					fDestStream << oRegister->sName << "_";
				}
	
				fDestStream << oBit->sName << "\" address=\"";
				fDestStream.flags(ios::hex);
				fDestStream << "0x" << (1 << oBit->iIndex);
				fDestStream.flags(ios::dec);
				fDestStream << "\"/>" << endl;
			}

			fDestStream << "\t\t\t</bits>" << endl;
		}

		fDestStream << "\t\t</register>" << endl;
	}

	// Write combined registers
	for (TCombinedRegisterList::iterator oCombinedRegister = aCombinedRegisterList.begin(); oCombinedRegister < aCombinedRegisterList.end(); oCombinedRegister++) {

		fDestStream << "\t\t<register name=\"" << oCombinedRegister->sName << "\" bits=\"" << oCombinedRegister->iBitWidth << "\"/>" << endl;
	}

	fDestStream << "\t</registers>" << endl;

	// Write general ports
	fDestStream << "\t<ports>" << endl;

	for (TRegisterList::iterator oRegister = aRegisterList.begin();	oRegister < aRegisterList.end(); oRegister++) {

		if ((oRegister->sName.substr(0, 4) == "PORT") && (oRegister->sName.length() == 5)) {
			char cPortChar = oRegister->sName.at(4);

			fDestStream << "\t\t<port char=\"" << cPortChar << "\"/>" << endl;
		}
	}

	fDestStream << "\t</ports>" << endl;

	fDestStream << "</controller>" << endl;

	// Close file
	fDestStream.close();

	return true;
}

